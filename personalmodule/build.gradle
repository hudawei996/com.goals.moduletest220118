//plugins {
//    id 'com.android.application'
//    id 'kotlin-android'
//}
if (isRelease) { // 如果是发布版本时，各个模块都不能独立运行
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
apply plugin: 'kotlin-android'

android {
//    compileSdk androidConfig.compileSdkVersion
    compileSdkVersion androidConfig.compileSdkVersion

    defaultConfig {
        if (!isRelease) {
            applicationId "com.goals.personal"
        }
//        minSdk androidConfig.minSdkVersion
        minSdkVersion androidConfig.minSdkVersion
//        targetSdk androidConfig.targetSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        // 在gradle文件中配置选项参数值（用于APT传参接收）
        //TODO 每个使用到注解处理的地方都需要这个值的传递
        //切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                //这两种写法都行
//                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
                arguments = [moduleName: project.getName(), packageNameForAPT: rootProject.ext.packageNameForAPT]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // 配置资源路径，方便测试环境，打包不集成到正式环境
    sourceSets {
        main {
            if (!isRelease) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                // 集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    // release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //所有组件库，包括主项目，都需要依赖公共基础库
    implementation project(':commonlib')

    annotationProcessor project(':compiler')
    implementation project(':arouter-annotations')


    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version" // 公共基础库
}
repositories {
    mavenCentral()
}